---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgresql-backup
  namespace: default
spec:
  schedule: "@daily"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: alpine
              image: alpine
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
              env:
                - name: DATABASES
                  value: "freshrss metabase paperless shhh teslamate"
                - name: POSTGRES_HOST
                  value: postgresql.default
                - name: POSTGRES_USER
                  value: postgres
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgresql
                      key: postgres-password
                - name: BACKBLAZE_B2_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: cluster-secrets
                      key: BACKBLAZE_B2_KEY_ID
                - name: BACKBLAZE_B2_APPLICATION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: cluster-secrets
                      key: BACKBLAZE_B2_APPLICATION_KEY
              command: ["/bin/sh"]
              args:
                - -c
                - |
                  set -euo pipefail

                  DATE=$(date +%Y-%m-%d)
                  BACKUP_DIR="backups/$DATE"

                  apk update
                  apk add postgresql py-pip curl
                  pip install --break-system-packages --upgrade "b2==4.3.3"

                  mkdir -p "$BACKUP_DIR"
                  cd "$BACKUP_DIR"

                  b2 authorize-account "$BACKBLAZE_B2_KEY_ID" "$BACKBLAZE_B2_APPLICATION_KEY"

                  for DATABASE in $${DATABASES}; do
                    echo "Backing up $DATABASE..."
                    if ! pg_dump \
                      -h "$POSTGRES_HOST" \
                      -U "$POSTGRES_USER" \
                      --clean \
                      --if-exists \
                      "$DATABASE" | gzip -9 > "$DATABASE.sql.gz"; then
                      echo "Error backing up $DATABASE" >&2
                      exit 1
                    fi
                  done

                  for DATABASE in $${DATABASES}; do
                    if [ ! -s "$DATABASE.sql.gz" ]; then
                      echo "Backup file for $DATABASE is empty or missing" >&2
                      exit 1
                    fi
                  done

                  echo "Uploading backups to B2..."
                  if ! b2 sync . "b2://k3s-lan-${SECRET_LAB_DOMAIN/./-}/backups/postgresql/$DATE"; then
                    echo "Error uploading to B2" >&2
                    exit 1
                  fi

                  curl -m 10 --retry 5 https://down.fyi/ping/1b791e54-6f2e-4a36-ad33-dd0699b8effb

                  echo "Backup completed successfully"
          restartPolicy: OnFailure
